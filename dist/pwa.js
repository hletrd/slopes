document.addEventListener("DOMContentLoaded",(function(){const addToHomeButton=document.getElementById("addToHomeButton"),installationModal=document.getElementById("installationModal"),closeModal=document.getElementById("closeModal"),iOSInstructions=document.getElementById("iOSInstructions"),androidInstructions=document.getElementById("androidInstructions");let deferredPrompt;const isIOS=/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,isStandalone=window.matchMedia("(display-mode: standalone)").matches||window.navigator.standalone||document.referrer.includes("android-app://");isIOS?(iOSInstructions.style.display="block",androidInstructions.style.display="none"):(iOSInstructions.style.display="none",androidInstructions.style.display="block"),!isIOS&&!/Android/.test(navigator.userAgent)||isStandalone||(addToHomeButton.style.display="flex"),window.addEventListener("beforeinstallprompt",(e=>{e.preventDefault(),deferredPrompt=e,addToHomeButton.style.display="flex"})),addToHomeButton.addEventListener("click",(()=>{deferredPrompt?(deferredPrompt.prompt(),deferredPrompt.userChoice.then((choiceResult=>{"accepted"===choiceResult.outcome&&(console.log("User accepted the install prompt"),addToHomeButton.style.display="none"),deferredPrompt=null}))):installationModal.style.display="block"})),closeModal.addEventListener("click",(()=>{installationModal.style.display="none"})),window.addEventListener("appinstalled",(evt=>{addToHomeButton.style.display="none"}));const infoButton=document.getElementById("infoButton"),infoModal=document.getElementById("infoModal"),closeInfoModal=document.getElementById("closeInfoModal");if(infoButton.addEventListener("click",(()=>{infoModal.style.display="flex"})),closeInfoModal.addEventListener("click",(()=>{infoModal.style.display="none"})),infoModal.addEventListener("click",(e=>{e.target===infoModal&&(infoModal.style.display="none")})),"serviceWorker"in navigator){function checkForUpdates(){navigator.serviceWorker.getRegistration().then((registration=>{registration&&registration.update().then((()=>{console.log("Service worker updated")})).catch((err=>{console.error("Service worker update failed:",err)}))}))}navigator.serviceWorker.register("/service-worker.js?v=4",{scope:"/"}).then((registration=>{console.log("Service Worker registered with scope:",registration.scope)})).catch((error=>{console.error("Service Worker registration failed:",error)}));let refreshing=!1;if(navigator.serviceWorker.addEventListener("controllerchange",(()=>{refreshing||(refreshing=!0,console.log("Service worker updated, reloading page"),window.location.reload())})),checkForUpdates(),setInterval(checkForUpdates,36e5),isStandalone){const createUpdateNotification=()=>{const notificationContainer=document.createElement("div");notificationContainer.className="update-notification",notificationContainer.style.cssText="\n          position: fixed;\n          bottom: 20px;\n          left: 50%;\n          transform: translateX(-50%);\n          background-color: #4CAF50;\n          color: white;\n          padding: 10px 20px;\n          border-radius: 4px;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n          z-index: 9999;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          min-width: 250px;\n          font-size: 14px;\n        ";const message=document.createElement("span");message.textContent="업데이트가 준비되었습니다.";const updateButton=document.createElement("button");updateButton.textContent="지금 적용",updateButton.style.cssText="\n          background-color: white;\n          color: #4CAF50;\n          border: none;\n          padding: 5px 10px;\n          border-radius: 4px;\n          margin-left: 10px;\n          cursor: pointer;\n        ",updateButton.addEventListener("click",(()=>{navigator.serviceWorker.getRegistration().then((registration=>{registration&&registration.waiting&&registration.waiting.postMessage({type:"SKIP_WAITING"})})),notificationContainer.remove()})),notificationContainer.appendChild(message),notificationContainer.appendChild(updateButton),document.body.appendChild(notificationContainer)};navigator.serviceWorker.getRegistration().then((registration=>{registration&&(registration.waiting&&createUpdateNotification(),registration.addEventListener("updatefound",(()=>{const newWorker=registration.installing;newWorker.addEventListener("statechange",(()=>{"installed"===newWorker.state&&navigator.serviceWorker.controller&&createUpdateNotification()}))})))}))}}}));